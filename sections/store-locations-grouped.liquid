{% comment %} Incluir lookbook.css si existe, sino usar estilos inline {% endcomment %}

{%- liquid
  assign sid = section.id
  assign se_stts = section.settings
  assign stt_layout = se_stts.layout
  if stt_layout == 't4s-se-container'
    assign html_layout = '<div class="t4s-container">__</div></div>' | split: '__'
  elsif stt_layout == 't4s-container-wrap'
    assign html_layout = '<div class="t4s-container">__</div>' | split: '__'
  else
    assign html_layout = '__' | split: '__'
  endif
-%}

<style>
/* Estilos base de los pines (basados en lookbook.css) */
.t4s-lookbook-pin {
    width: 40px;
    height: 40px;
    border-radius: 50px;
    position: absolute;
    top: var(--ps-top);
    transform: translate(calc(-1*var(--ps-left)), calc(-1*var(--ps-top)));
    left: var(--ps-left);
    opacity: 1;
    pointer-events: auto;
    z-index: 2;
    cursor: pointer;
}
.t4s-lookbook-pin .t4s-pin-tt {
    color: var(--cl-pin);
    background-color: var(--bg-pin);
    display: block;
    width: 100%;
    height: 100%;
    cursor: pointer;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 1;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    pointer-events: none;
}
.t4s-lookbook-pin:hover {
    opacity: 0.8;
    color: var(--cl-pin);
}
.t4s-nav-link-icon {
    width: 20px;
    height: 24px;
    display: block;
    flex: 0 0 auto;
    color: inherit;
}
/* SVG del marcador de ubicación */
.t4s-nav-link-icon svg {
    width: 100%;
    height: 100%;
    display: block;
}
.t4s-nav-link-icon svg path {
    fill: currentColor;
}
.t4s-lookbook-pin .t4s-zoompin {
    position: absolute;
    top: -8px;
    right: -8px;
    bottom: -8px;
    left: -8px;
    display: block;
    animation: zoompin 2s ease infinite;
    border-radius: 50%;
    background-color: rgba(255,255,255,.5);
    pointer-events: none;
}
@keyframes zoompin {
    0% { opacity: 0; transform: scale(.2) }
    50% { opacity: .8 }
    100% { opacity: 0; transform: scale(1) }
}
/* Tamaños base de los pines */
.pin__size--small { width: 24px; height: 24px; font-size: 10px; }
.pin__size--medium { width: 32px; height: 32px; font-size: 12px; }
.pin__size--exmedium { width: 40px; height: 40px; font-size: 13px; }
.pin__size--large { width: 48px; height: 48px; font-size: 15px; }

/* Ajustes de tamaño de marcador SVG para diferentes tamaños de pin */
.pin__size--small .t4s-nav-link-icon { width: 16px; height: 19px; }
.pin__size--medium .t4s-nav-link-icon { width: 18px; height: 21px; }
.pin__size--exmedium .t4s-nav-link-icon { width: 20px; height: 24px; }
.pin__size--large .t4s-nav-link-icon { width: 24px; height: 28px; }

/* Estilos para las tarjetas de tienda */
.t4s-store-locations { 
  position: relative;
  --modal-bg: {{ se_stts.modal_bg_color | default: '#ffffff' }};
  --modal-location-text: {{ se_stts.modal_text_color | default: '#333333' }};
  --modal-location-title: {{ se_stts.modal_title_color | default: '#000000' }};
  --modal-border: {{ se_stts.modal_border_color | default: '#e0e0e0' }};
  --modal-close: {{ se_stts.modal_close_color | default: '#666666' }};
  --modal-close-hover: {{ se_stts.modal_close_hover_color | default: '#000000' }};
  --dropdown-bg: {{ se_stts.dropdown_bg_color | default: '#ffffff' }};
  --dropdown-text: {{ se_stts.dropdown_text_color | default: '#333333' }};
  --dropdown-title: {{ se_stts.dropdown_title_color | default: '#000000' }};
  --dropdown-border: {{ se_stts.dropdown_border_color | default: '#e0e0e0' }};
  {% if se_stts.full_width_desktop %}
  width: 100vw;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  {% endif %}
}
.t4s-store-pin { z-index: 3; }
.t4s-store-card { position: absolute; z-index: 4; display: none; }
.t4s-store-card.is-active { display: block; }
.t4s-store-card { top: var(--ps-top); left: var(--ps-left); transform: translate(-50%, calc(-100% - 12px)); max-width: 280px; }

/* Estilos para el modal */
.t4s-store-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  z-index: 999;
  display: none;
  align-items: center;
  justify-content: center;
  backdrop-filter: blur(4px);
}
.t4s-store-modal.is-active {
  display: flex;
}
.t4s-store-modal__content {
  background: var(--modal-bg, #fff);
  border: 1px solid var(--modal-border, #e0e0e0);
  border-radius: 12px;
  max-width: 90vw;
  max-height: 80vh;
  width: 600px;
  overflow: hidden;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  position: relative;
  color: var(--modal-location-text, #333333);
}
.t4s-store-modal__header {
  padding: 20px 24px 16px;
  border-bottom: 1px solid var(--modal-border, #e0e0e0);
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.t4s-store-modal__title {
  margin: 0;
  font-size: 20px;
  font-weight: 600;
  color: var(--modal-location-title, var(--modal-title, #111));
}
.t4s-store-modal__close {
  background: transparent;
  border: 0;
  font-size: 24px;
  cursor: pointer;
  color: var(--modal-close, #666);
  padding: 4px;
  line-height: 1;
}
.t4s-store-modal__close:hover {
  color: var(--modal-close-hover, #333);
}
.t4s-store-modal__body {
  padding: 0;
  max-height: calc(80vh - 80px);
  overflow-y: auto;
}
.t4s-store-modal__locations {
  display: flex;
  flex-direction: column;
}
.t4s-store-modal__location {
  padding: 20px 24px;
  border-bottom: 1px solid var(--modal-border, #e0e0e0);
}
.t4s-store-modal__location:last-child {
  border-bottom: none;
}
.t4s-store-modal__location-title {
  margin: 0 0 8px;
  font-size: 16px;
  font-weight: 600;
  color: var(--modal-location-title, #111);
}
.t4s-store-modal__location-info {
  margin: 0 0 6px;
  font-size: 14px;
  color: var(--modal-location-text, #666);
}
.t4s-store-modal__location-actions {
  display: flex;
  gap: 10px;
  margin-top: 15px;
  flex-wrap: wrap;
}
@media (max-width: 767px) {
  .t4s-store-modal__content {
    width: 95vw;
    max-height: 85vh;
  }
  .t4s-store-modal__header,
  .t4s-store-modal__location {
    padding: 16px 20px;
  }
}
@media (max-width: 480px) {
  .t4s-btn {
    flex: 1;
    min-width: auto;
  }
  
  .t4s-store-modal__location-actions {
    flex-direction: column;
  }
}
.t4s-store-card__inner { 
    background: var(--card-bg, #fff); 
    color: var(--card-text, #111); 
    border-radius: 8px; 
    box-shadow: 0 10px 30px rgba(0,0,0,.15); 
    padding: 14px 14px 12px; 
    line-height: 1.45; 
    border: 1px solid var(--card-border, rgba(0,0,0,.08));
}
.t4s-store-card__title { 
    margin: 0 24px 6px 0; 
    font-size: 16px; 
    font-weight: 600; 
    color: var(--card-title, inherit);
}
.t4s-store-card__address, .t4s-store-card__schedule, .t4s-store-card__phone { 
    margin: 0 0 6px; 
    font-size: 13px; 
    color: var(--card-content, inherit);
}
.t4s-store-card__phone a {
    color: var(--card-phone, var(--card-content, inherit));
    text-decoration: none;
}
.t4s-store-card__phone a:hover {
    text-decoration: underline;
}
.t4s-store-card__actions { display: flex; gap: 8px; margin-top: 8px; flex-wrap: wrap; }
.t4s-btn { 
    display: inline-flex; 
    align-items: center; 
    justify-content: center; 
    padding: 10px 20px; 
    border-radius: 6px; 
    font-size: 14px; 
    font-weight: 600;
    text-decoration: none; 
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: center;
    min-width: 120px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.t4s-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}
.t4s-btn--map { 
    background: #007bff; 
    color: white; 
}
.t4s-btn--map:hover {
    background: #0056b3;
    color: white;
}
.t4s-btn--wa { 
    background: #25d366; 
    color: white; 
}
.t4s-btn--wa:hover {
    background: #1da851;
    color: white;
}
.t4s-store-card__close { 
    position: absolute; 
    top: 6px; 
    right: 6px; 
    background: transparent; 
    border: 0; 
    font-size: 18px; 
    line-height: 1; 
    cursor: pointer; 
    color: var(--card-close, #666); 
}
.t4s-store-card__close:hover {
    color: var(--card-close-hover, #333);
}
/* Flecha/puntero */
.t4s-store-card.is-active::after { 
    content: ""; 
    position: absolute; 
    left: 50%; 
    bottom: -8px; 
    transform: translateX(-50%); 
    border: 8px solid transparent; 
    border-top-color: var(--card-bg, #fff); 
    filter: drop-shadow(0 -2px 2px rgba(0,0,0,.06)); 
}

/* Estilos base para lookbook */
.t4s-lookbook-img { position: relative; }
.t4s-pr { position: relative; }
.t4s-oh { overflow: hidden; }
.t4s_position_8 { position: relative; }
.t4s_cover { object-fit: cover; }
.t4s_ratioadapt .t4s_ratio { position: relative; padding-bottom: calc(100% / var(--aspect-ratioapt)); height: 0; }
.t4s_ratio img { position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; }

/* Imagen móvil específica */
.t4s-mobile-image {
  display: none;
  width: 100%;
  aspect-ratio: 1;
  object-fit: cover;
  margin-bottom: 15px;
}

/* Estilos para lista móvil */
.t4s-mobile-locations {
  display: none;
  padding: 15px;
  width: 100%;
  box-sizing: border-box;
}

/* Media queries para ancho completo en tablet */
@media (max-width: 1024px) and (min-width: 768px) {
  {% if se_stts.full_width_tablet %}
  .t4s-store-locations {
    width: 100vw;
    margin-left: calc(50% - 50vw);
    margin-right: calc(50% - 50vw);
  }
  {% endif %}
  
  .t4s-section-inner {
    {% if se_stts.mg_tb %}margin: {{ se_stts.mg_tb | replace: ',', ' ' }} !important;{% endif %}
    {% if se_stts.pd_tb %}padding: {{ se_stts.pd_tb | replace: ',', ' ' }} !important;{% endif %}
  }
}

@media (max-width: 767px) {
  .t4s-lookbook-img {
    display: none !important;
  }
  
  .t4s-mobile-image {
    display: block !important;
  }
  
  {% if se_stts.full_width_mobile %}
  .t4s-store-locations {
    width: 100vw;
    margin-left: calc(50% - 50vw);
    margin-right: calc(50% - 50vw);
  }
  {% endif %}
  
  .t4s-section-inner {
    {% if se_stts.mg_mb %}margin: {{ se_stts.mg_mb | replace: ',', ' ' }} !important;{% endif %}
    {% if se_stts.pd_mb %}padding: {{ se_stts.pd_mb | replace: ',', ' ' }} !important;{% endif %}
  }
}

.t4s-mobile-location {
  background: var(--mobile-card-bg, #fff);
  border-radius: 12px;
  padding: 16px;
  margin: 0 0 16px 0;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  border: 1px solid var(--mobile-card-border, #e0e0e0);
  width: 100%;
  box-sizing: border-box;
}

.t4s-mobile-location:last-child {
  margin-bottom: 0;
}

.t4s-mobile-location__title {
  margin: 0 0 8px;
  font-size: 18px;
  font-weight: 600;
  color: var(--mobile-title, #111);
}

.t4s-mobile-location__info {
  margin: 0 0 6px;
  font-size: 14px;
  color: var(--mobile-text, #666);
  line-height: 1.4;
}

.t4s-mobile-location__actions {
  display: flex;
  gap: 10px;
  margin-top: 12px;
  flex-wrap: wrap;
}

/* Dropdown móvil para ubicaciones agrupadas */
.t4s-mobile-dropdown {
  background: var(--dropdown-bg, var(--mobile-card-bg, #fff));
  border-radius: 12px;
  margin: 0 0 16px 0;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  border: 1px solid var(--dropdown-border, var(--mobile-card-border, #e0e0e0));
  overflow: hidden;
  width: 100%;
  box-sizing: border-box;
  color: var(--dropdown-text, var(--mobile-text, #333333));
}

.t4s-mobile-dropdown__header {
  padding: 16px;
  background: var(--mobile-dropdown-header, #f1f3f4);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-bottom: 1px solid var(--mobile-card-border, #e0e0e0);
}

.t4s-mobile-dropdown__title {
  margin: 0;
  font-size: 16px;
  font-weight: 600;
  color: var(--dropdown-title, var(--mobile-title, #111));
}

.t4s-mobile-dropdown__count {
  background: var(--mobile-count-bg, #007bff);
  color: var(--mobile-count-text, #fff);
  border-radius: 12px;
  padding: 4px 8px;
  font-size: 12px;
  font-weight: 600;
}

.t4s-mobile-dropdown__arrow {
  font-size: 14px;
  color: var(--mobile-arrow, #666);
  transition: transform 0.3s ease;
}

.t4s-mobile-dropdown.is-open .t4s-mobile-dropdown__arrow {
  transform: rotate(180deg);
}

.t4s-mobile-dropdown__content {
  display: none;
  border-top: 1px solid var(--mobile-card-border, #e0e0e0);
}

.t4s-mobile-dropdown.is-open .t4s-mobile-dropdown__content {
  display: block;
}

.t4s-mobile-dropdown__item {
  padding: 16px;
  border-bottom: 1px solid var(--mobile-item-border, #f0f0f0);
}

.t4s-mobile-dropdown__item:last-child {
  border-bottom: none;
}

.t4s-mobile-dropdown__item-title {
  margin: 0 0 8px;
  font-size: 16px;
  font-weight: 600;
  color: var(--mobile-item-title, #111);
}

.t4s-mobile-dropdown__item-info {
  margin: 0 0 6px;
  font-size: 14px;
  color: var(--mobile-text, #666);
  line-height: 1.4;
}

.t4s-mobile-dropdown__item-actions {
  display: flex;
  gap: 8px;
  margin-top: 12px;
  flex-wrap: wrap;
}

/* Ocultar pines y modal en móvil, mostrar lista */
@media (max-width: 767px) {
  .t4s-store-pin { display: none !important; }
  .t4s-store-modal { display: none !important; }
  .t4s-mobile-locations { display: block; }
  
  .t4s-btn {
    flex: 1;
    min-width: auto;
    font-size: 13px;
    padding: 8px 12px;
  }
}

/* Contador de ubicaciones en el pin */
.t4s-pin-count {
  position: absolute;
  top: -6px;
  right: -6px;
  background: #ff4444;
  color: white;
  border-radius: 50%;
  width: 18px;
  height: 18px;
  font-size: 10px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 2px solid white;
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}
.pin__size--small .t4s-pin-count { width: 14px; height: 14px; font-size: 8px; top: -4px; right: -4px; }
.pin__size--medium .t4s-pin-count { width: 16px; height: 16px; font-size: 9px; top: -5px; right: -5px; }
.pin__size--large .t4s-pin-count { width: 20px; height: 20px; font-size: 11px; top: -7px; right: -7px; }
</style>

<div
  class="t4s-section-inner t4s_nt_se_{{ sid }} t4s_se_{{ sid }} {{ stt_layout }}"
  style="{% if se_stts.mg %}margin: {{ se_stts.mg | replace: ',', ' ' }};{% endif %}{% if se_stts.pd %}padding: {{ se_stts.pd | replace: ',', ' ' }};{% endif %}"
>
  {{- html_layout[0] -}}
  {%- if stt_layout == 't4s-se-container' -%}<div class="t4s-container-inner">{%- endif -%}

  <div class="t4s-store-locations">
    {%- comment -%} Imagen específica para móvil - fuera del contenedor desktop {%- endcomment -%}
    {%- if se_stts.mobile_image -%}
      <img
        class="t4s-mobile-image"
        src="{{ se_stts.mobile_image | image_url: width: 600 }}"
        srcset="{{ se_stts.mobile_image | image_url: width: 400 }} 400w, {{ se_stts.mobile_image | image_url: width: 600 }} 600w, {{ se_stts.mobile_image | image_url: width: 800 }} 800w"
        sizes="100vw"
        width="{{ se_stts.mobile_image.width | default: 600 }}"
        height="{{ se_stts.mobile_image.height | default: 600 }}"
        alt="{{ se_stts.mobile_image.alt | escape }}"
        loading="lazy"
      >
    {%- elsif se_stts.image -%}
      <img
        class="t4s-mobile-image"
        src="{{ se_stts.image | image_url: width: 600 }}"
        srcset="{{ se_stts.image | image_url: width: 400 }} 400w, {{ se_stts.image | image_url: width: 600 }} 600w, {{ se_stts.image | image_url: width: 800 }} 800w"
        sizes="100vw"
        width="600"
        height="600"
        alt="{{ se_stts.image.alt | escape }}"
        loading="lazy"
      >
    {%- endif -%}
    
    <div class="t4s-lookbook-img t4s-pr t4s-oh t4s_position_8 t4s_cover t4s_ratioadapt">
      {%- if se_stts.image -%}
        {%- assign ratio = se_stts.image.aspect_ratio -%}
        <div class="t4s-lookbook-img-wrap t4s_ratio" style="--aspect-ratioapt:{{ ratio | default: 1.7777 }};">
          <img
            class="store-bg"
            src="{{ se_stts.image | image_url: width: 800 }}"
            srcset="{{ se_stts.image | image_url: width: 800 }} 800w, {{ se_stts.image | image_url: width: 1200 }} 1200w, {{ se_stts.image | image_url: width: 1600 }} 1600w"
            sizes="100vw"
            width="{{ se_stts.image.width | default: 1600 }}"
            height="{{ se_stts.image.height | default: 900 }}"
            alt="{{ se_stts.image.alt | escape }}"
            loading="lazy"
          >
          <span style="background: url({{ se_stts.image | image_url: width: 1 }})"></span>
        </div>
      {%- else -%}
        {%- capture current -%}{% cycle 1, 2 %}{%- endcapture -%}
        {{ 'lifestyle-' | append: current | placeholder_svg_tag: 't4s-placeholder-svg t4s-svg-bg1' }}
      {%- endif -%}
    </div>

    {%- comment -%} Crear pines para ubicaciones agrupadas por ciudad {%- endcomment -%}
    {%- for block in section.blocks -%}
      {%- if block.type == 'city_group' -%}
        {%- assign b = block.settings -%}
        {%- assign city_name = b.city_name | default: 'Ubicaciones' -%}
        {%- assign locations_list = b.locations_text | split: ',' -%}
        {%- assign locations_count = locations_list.size -%}
        
        {%- assign hide_mobile = false -%}
        {%- if se_stts.hide_pins_on_mobile or b.hide_on_mobile -%}
          {%- assign hide_mobile = true -%}
        {%- endif -%}
        
        <div id="store-pin-{{ block.id }}"
             class="t4s-lookbook-pin t4s-store-pin pin__size--{{ b.pos_size }} {% if hide_mobile %}hide-mobile{% endif %}"
             style="--ps-top: {{ b.pos_t }}%; --ps-left: {{ b.pos_l }}%; --bg-pin: {{ b.bg_cl }}; --cl-pin: {{ b.cl_text }};"
             data-city-name="{{ city_name }}"
             data-block-id="{{ block.id }}"
             data-locations-count="{{ locations_count }}">
          <span class="t4s-pin-tt">
            <svg class="t4s-nav-link-icon" viewBox="0 0 336.643 336.643" xmlns="http://www.w3.org/2000/svg">
              <path fill="currentColor" d="M157.618,327.478c5.908,12.226,15.501,12.22,21.397-0.012c25.299-52.481,86.896-180.42,88.812-185.743l0.324-0.886 c3.837-10.959,6.028-22.689,6.028-34.969C274.18,47.411,226.79,0,168.331,0C109.859,0,62.463,47.402,62.463,105.868 c0,8.656,1.156,17.021,3.113,25.076l0.108,0.447C68.393,142.269,131.86,274.167,157.618,327.478z M168.336,46.162 c32.969,0,59.691,26.751,59.691,59.712c0,32.981-26.728,59.705-59.691,59.705c-32.984,0-59.711-26.73-59.711-59.705 C108.631,72.913,135.352,46.162,168.336,46.162z"/>
            </svg>
            {%- if locations_count > 1 -%}
              <span class="t4s-pin-count">{{ locations_count }}</span>
            {%- endif -%}
          </span>
          <span class="t4s-zoompin"></span>
        </div>
      {%- endif -%}
    {%- endfor -%}

    {%- comment -%} Modal para mostrar ubicaciones {%- endcomment -%}
    <div class="t4s-store-modal" id="store-modal">
      <div class="t4s-store-modal__content">
        <div class="t4s-store-modal__header">
          <h2 class="t4s-store-modal__title">Ubicaciones disponibles</h2>
          <button class="t4s-store-modal__close" type="button" aria-label="Cerrar modal">&times;</button>
        </div>
        <div class="t4s-store-modal__body">
          <div class="t4s-store-modal__locations" id="modal-locations">
            {%- comment -%} Las ubicaciones se cargarán dinámicamente {%- endcomment -%}
          </div>
        </div>
      </div>
    </div>

    {%- comment -%} Lista móvil de ubicaciones {%- endcomment -%}
    <div class="t4s-mobile-locations" id="mobile-locations">
      {%- comment -%} Las ubicaciones se cargarán dinámicamente {%- endcomment -%}
    </div>
  </div>
  {%- if stt_layout == 't4s-se-container' -%}</div>{%- endif -%}
  {{- html_layout[1] -}}
</div>

<script>
// Sistema optimizado de modal y lista móvil para ubicaciones
(function(){
  // Variable para evitar múltiples inicializaciones
  var storeLocationsInitialized = false;
  
  // Cache y configuración de rendimiento
  var performanceConfig = {
    batchSize: 10, // Renderizar ubicaciones en lotes de 10
    virtualScrollThreshold: 15, // Usar scroll virtual si hay más de 15 ubicaciones
    debounceDelay: 150, // Delay para eventos de scroll
    enableMetrics: true // Habilitar métricas de rendimiento
  };
  
  var renderCache = new Map();
  var intersectionObserver = null;
  
  // Métricas de rendimiento
  var performanceMetrics = {
    renderTimes: [],
    modalOpenTimes: [],
    dropdownLoadTimes: [],
    totalLocations: 0,
    batchesRendered: 0,
    
    // Función para registrar tiempo de renderizado
    logRenderTime: function(operation, startTime) {
      if (!performanceConfig.enableMetrics) return;
      
      var endTime = performance.now();
      var duration = endTime - startTime;
      
      switch(operation) {
        case 'modal':
          this.modalOpenTimes.push(duration);
          break;
        case 'dropdown':
          this.dropdownLoadTimes.push(duration);
          break;
        default:
          this.renderTimes.push(duration);
      }
      
      // Mantener solo las últimas 50 métricas para evitar uso excesivo de memoria
      if (this.renderTimes.length > 50) this.renderTimes.shift();
      if (this.modalOpenTimes.length > 50) this.modalOpenTimes.shift();
      if (this.dropdownLoadTimes.length > 50) this.dropdownLoadTimes.shift();
    },
    
    // Función para obtener estadísticas de rendimiento
    getStats: function() {
      if (!performanceConfig.enableMetrics) return null;
      
      var avgRender = this.renderTimes.length > 0 ? 
        this.renderTimes.reduce(function(a, b) { return a + b; }, 0) / this.renderTimes.length : 0;
      var avgModal = this.modalOpenTimes.length > 0 ? 
        this.modalOpenTimes.reduce(function(a, b) { return a + b; }, 0) / this.modalOpenTimes.length : 0;
      var avgDropdown = this.dropdownLoadTimes.length > 0 ? 
        this.dropdownLoadTimes.reduce(function(a, b) { return a + b; }, 0) / this.dropdownLoadTimes.length : 0;
      
      return {
        averageRenderTime: Math.round(avgRender * 100) / 100,
        averageModalTime: Math.round(avgModal * 100) / 100,
        averageDropdownTime: Math.round(avgDropdown * 100) / 100,
        totalLocations: this.totalLocations,
        batchesRendered: this.batchesRendered
      };
    }
  };

  // Verificar que el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initStoreLocations);
  } else {
    initStoreLocations();
  }

  function initStoreLocations() {
    // Evitar inicializar múltiples veces
    if (storeLocationsInitialized) {
      return;
    }
    storeLocationsInitialized = true;
    
    // Optimización para editor de Shopify - reducir procesamiento inicial
    var isInEditor = window.Shopify && window.Shopify.designMode;
    if (isInEditor && performanceConfig.enableMetrics) {
      console.log('Store Locations: Modo editor detectado - usando inicialización optimizada');
    }
    
    // Datos de ciudades optimizados - carga diferida para mejorar rendimiento en editor
    var allCityGroups = {};
    var cityDataLoaded = false;
    
    // Función para cargar datos de ciudades bajo demanda
    function loadCityData() {
      if (cityDataLoaded) return allCityGroups;
      
      // Solo cargar datos cuando realmente se necesiten
      allCityGroups = {
        {%- for block in section.blocks -%}
          {%- if block.type == 'city_group' -%}
            {%- assign b = block.settings -%}
            {%- assign locations_list = b.locations_text | split: ',' -%}
            {{ b.city_name | json }}: {
              id: '{{ block.id }}',
              cityName: {{ b.city_name | json }},
              locations: [
                {%- for location in locations_list -%}
                  {
                    title: {{ location | strip | json }},
                    address: "",
                    whatsappNumber: {{ b.whatsapp_number | json }}
                  }{% unless forloop.last %},{% endunless %}
                {%- endfor -%}
              ]
            }{% unless forloop.last %},{% endunless %}
          {%- endif -%}
        {%- endfor -%}
      };
      
      cityDataLoaded = true;
      return allCityGroups;
    }

    var modal = document.getElementById('store-modal');
    var modalLocations = document.getElementById('modal-locations');
    var mobileLocations = document.getElementById('mobile-locations');
    var enableWhatsApp = {{ se_stts.enable_whatsapp_button | json }};
    
    // Verificar que los elementos existan
    if (!modal || !modalLocations || !mobileLocations) {
      console.warn('Store location elements not found');
      return;
    }
    
    var modalClose = modal.querySelector('.t4s-store-modal__close');
    
    // Inicialización diferida para mejorar rendimiento en editor
    var componentsInitialized = false;
    
    function initializeComponents() {
      if (componentsInitialized) return;
      componentsInitialized = true;
      
      // Inicializar Intersection Observer para lazy loading
      initIntersectionObserver();

      // Inicializar lista móvil con optimizaciones
      initMobileListOptimized();
      
      // Inicializar event listeners después de crear los dropdowns
      initEventListeners();
    }
    
    // Inicializar componentes solo cuando sea necesario
    // En el editor, esto mejora significativamente el tiempo de carga
    if (window.Shopify && window.Shopify.designMode) {
      // En modo editor, usar inicialización diferida más agresiva
      setTimeout(initializeComponents, 100);
    } else {
      // En producción, inicializar inmediatamente
      initializeComponents();
    }

    // Función optimizada para inicializar lista móvil con dropdowns separados por ciudad
    function initMobileListOptimized() {
      var startTime = performance.now();
      
      // Cargar datos de ciudades bajo demanda
      var cityGroups = loadCityData();
      var groupIds = Object.keys(cityGroups);
      
      // Calcular total de ubicaciones
      var totalLocations = 0;
      groupIds.forEach(function(cityId) {
        totalLocations += cityGroups[cityId].locations.length;
      });
      
      // Actualizar métricas
      performanceMetrics.totalLocations = totalLocations;

      // Limpiar contenido anterior
      mobileLocations.innerHTML = '';
      
      // Decidir estrategia de renderizado basada en cantidad de grupos
      if (groupIds.length <= performanceConfig.virtualScrollThreshold) {
        renderCityGroupsImmediate(cityGroups, startTime);
      } else {
        renderCityGroupsBatched(cityGroups, startTime);
      }
    }
    
    // Renderizado inmediato para pocos grupos
    function renderCityGroupsImmediate(cityGroups, startTime) {
      var fragment = document.createDocumentFragment();
      
      Object.keys(cityGroups).forEach(function(cityId) {
        var cityData = cityGroups[cityId];
        var element = createCityGroupElement(cityId, cityData);
        fragment.appendChild(element);
      });
      
      mobileLocations.appendChild(fragment);
      
      // Registrar tiempo de renderizado
      performanceMetrics.logRenderTime('render', startTime);
    }
    
    // Renderizado por lotes para muchos grupos
    function renderCityGroupsBatched(cityGroups, startTime) {
      var cityIds = Object.keys(cityGroups);
      var currentBatch = 0;
      var batchSize = performanceConfig.batchSize;
      
      function renderNextBatch() {
        var fragment = document.createDocumentFragment();
        var start = currentBatch * batchSize;
        var end = Math.min(start + batchSize, cityIds.length);
        
        for (var i = start; i < end; i++) {
          var cityId = cityIds[i];
          var cityData = cityGroups[cityId];
          var element = createCityGroupElement(cityId, cityData);
          fragment.appendChild(element);
        }
        
        mobileLocations.appendChild(fragment);
        currentBatch++;
        performanceMetrics.batchesRendered++;
        
        // Continuar con el siguiente lote si hay más grupos
        if (end < cityIds.length) {
          requestAnimationFrame(renderNextBatch);
        } else {
          // Registrar tiempo total cuando termine el último lote
          performanceMetrics.logRenderTime('render', startTime);
        }
      }
      
      renderNextBatch();
    }
    
    // Función unificada para crear elementos de ciudad
    function createCityGroupElement(cityId, cityData) {
      var locations = cityData.locations || [];
      if (locations.length === 1) {
        return createMobileLocationElement(locations[0]);
      } else {
        return createMobileDropdownElementOptimized(cityId, locations);
      }
    }

    function createMobileLocationElement(location) {
      var div = document.createElement('div');
      div.className = 't4s-mobile-location';
      
      var html = '';
      if (location.title) {
        html += '<h3 class="t4s-mobile-location__title">' + escapeHtml(location.title) + '</h3>';
      }
      if (location.address) {
        html += '<p class="t4s-mobile-location__info">' + escapeHtml(location.address) + '</p>';
      }
      if (location.schedule) {
        html += '<p class="t4s-mobile-location__info"><strong>Horario:</strong> ' + escapeHtml(location.schedule) + '</p>';
      }
      if (location.phone) {
        html += '<p class="t4s-mobile-location__info"><strong>Teléfono:</strong> <a href="tel:' + location.phone.replace(/\s/g, '') + '">' + escapeHtml(location.phone) + '</a></p>';
      }
      
      // Botones de acción
      var actionsHtml = createActionButtons(location);
      if (actionsHtml) {
        html += '<div class="t4s-mobile-location__actions">' + actionsHtml + '</div>';
      }
      
      div.innerHTML = html;
      return div;
    }

    // Función optimizada para crear dropdown móvil
    function createMobileDropdownElementOptimized(groupId, locations) {
      var cacheKey = 'dropdown_' + groupId;
      
      // Verificar cache primero
      if (renderCache.has(cacheKey)) {
        return renderCache.get(cacheKey).cloneNode(true);
      }
      
      var div = document.createElement('div');
      div.className = 't4s-mobile-dropdown';
      div.setAttribute('data-group-id', groupId);
      
      // Header del dropdown (siempre visible)
      var header = document.createElement('div');
      header.className = 't4s-mobile-dropdown__header';
      
      var headerContent = document.createElement('div');
      var groupTitle = getGroupTitle(groupId);
      var title = document.createElement('h3');
      title.className = 't4s-mobile-dropdown__title';
      title.textContent = groupTitle;
      headerContent.appendChild(title);
      
      var headerActions = document.createElement('div');
      headerActions.style.cssText = 'display: flex; align-items: center; gap: 8px;';
      
      var count = document.createElement('span');
      count.className = 't4s-mobile-dropdown__count';
      count.textContent = locations.length;
      
      var arrow = document.createElement('span');
      arrow.className = 't4s-mobile-dropdown__arrow';
      arrow.textContent = '▼';
      
      headerActions.appendChild(count);
      headerActions.appendChild(arrow);
      header.appendChild(headerContent);
      header.appendChild(headerActions);
      
      // Content del dropdown (lazy loading)
      var content = document.createElement('div');
      content.className = 't4s-mobile-dropdown__content';
      content.setAttribute('data-lazy-load', 'true');
      content.setAttribute('data-locations', JSON.stringify(locations));
      
      div.appendChild(header);
      div.appendChild(content);
      
      // Guardar en cache
      renderCache.set(cacheKey, div.cloneNode(true));
      
      return div;
    }
    
    // Función optimizada para cargar contenido del dropdown bajo demanda
     function loadDropdownContent(contentElement) {
       if (contentElement.getAttribute('data-loaded') === 'true') {
         return;
       }
       
       var startTime = performance.now();
       var locations = JSON.parse(contentElement.getAttribute('data-locations'));
       
       // Usar renderizado por lotes si hay muchas ubicaciones
       if (locations.length > performanceConfig.batchSize) {
         loadDropdownContentBatched(contentElement, locations, startTime);
       } else {
         loadDropdownContentImmediate(contentElement, locations, startTime);
       }
       
       contentElement.setAttribute('data-loaded', 'true');
     }
    
    // Carga inmediata para pocas ubicaciones
     function loadDropdownContentImmediate(contentElement, locations, startTime) {
       var fragment = document.createDocumentFragment();
       
       locations.forEach(function(location) {
         var item = createDropdownItem(location);
         fragment.appendChild(item);
       });
       
       contentElement.appendChild(fragment);
       
       // Registrar tiempo de carga del dropdown
       performanceMetrics.logRenderTime('dropdown', startTime);
     }
     
     // Carga por lotes para muchas ubicaciones
     function loadDropdownContentBatched(contentElement, locations, startTime) {
       var currentBatch = 0;
       var batchSize = performanceConfig.batchSize;
       
       function loadNextBatch() {
         var fragment = document.createDocumentFragment();
         var start = currentBatch * batchSize;
         var end = Math.min(start + batchSize, locations.length);
         
         for (var i = start; i < end; i++) {
           var item = createDropdownItem(locations[i]);
           fragment.appendChild(item);
         }
         
         contentElement.appendChild(fragment);
         currentBatch++;
         
         if (end < locations.length) {
           requestAnimationFrame(loadNextBatch);
         } else {
           // Registrar tiempo total del dropdown cuando termine
           performanceMetrics.logRenderTime('dropdown', startTime);
         }
       }
       
       loadNextBatch();
     }
     
     // Función para mostrar estadísticas de rendimiento en consola (solo en desarrollo)
     function showPerformanceStats() {
       if (!performanceConfig.enableMetrics) return;
       
       var stats = performanceMetrics.getStats();
       if (stats) {
         console.group('📊 Store Locations Performance Stats');
         console.log('🏪 Total Locations:', stats.totalLocations);
         console.log('📦 Batches Rendered:', stats.batchesRendered);
         console.log('⚡ Average Render Time:', stats.averageRenderTime + 'ms');
         console.log('🔲 Average Modal Time:', stats.averageModalTime + 'ms');
         console.log('📋 Average Dropdown Time:', stats.averageDropdownTime + 'ms');
         console.groupEnd();
       }
     }
     
     // Exponer función de estadísticas globalmente para debugging
     window.storeLocationsStats = showPerformanceStats;
    
    // Función auxiliar para crear items del dropdown
    function createDropdownItem(location) {
      var item = document.createElement('div');
      item.className = 't4s-mobile-dropdown__item';
      
      var html = '';
      if (location.title) {
        html += '<h4 class="t4s-mobile-dropdown__item-title">' + escapeHtml(location.title) + '</h4>';
      }
      if (location.address) {
        html += '<p class="t4s-mobile-dropdown__item-info">' + escapeHtml(location.address) + '</p>';
      }
      if (location.schedule) {
        html += '<p class="t4s-mobile-dropdown__item-info"><strong>Horario:</strong> ' + escapeHtml(location.schedule) + '</p>';
      }
      if (location.phone) {
        html += '<p class="t4s-mobile-dropdown__item-info"><strong>Teléfono:</strong> <a href="tel:' + location.phone.replace(/\s/g, '') + '">' + escapeHtml(location.phone) + '</a></p>';
      }
      
      var actionsHtml = createActionButtons(location);
      if (actionsHtml) {
        html += '<div class="t4s-mobile-dropdown__item-actions">' + actionsHtml + '</div>';
      }
      
      item.innerHTML = html;
      return item;
    }

    function createActionButtons(location) {
      var actionsHtml = '';
      if (location.mapsUrl) {
        var mapBtnStyles = '';
        if (location.btnMapBg) mapBtnStyles += 'background-color: ' + location.btnMapBg + '; ';
        if (location.btnMapText) mapBtnStyles += 'color: ' + location.btnMapText + '; ';
        if (location.btnMapBorder) mapBtnStyles += 'border-color: ' + location.btnMapBorder + '; ';
        
        actionsHtml += '<a class="t4s-btn t4s-btn--map" href="' + location.mapsUrl + '" target="_blank" rel="noopener"' + (mapBtnStyles ? ' style="' + mapBtnStyles + '"' : '') + '>Ver en Maps</a>';
      }
      if (enableWhatsApp && location.whatsappNumber) {
        var waPhone = location.whatsappNumber.replace(/[\s\(\)\-\+]/g, '');
        var waText = 'Hola, quiero información sobre ' + location.title;
        
        actionsHtml += '<a class="t4s-btn t4s-btn--wa" href="https://wa.me/' + waPhone + '?text=' + encodeURIComponent(waText) + '" target="_blank" rel="noopener">WhatsApp</a>';
      }
      return actionsHtml;
    }

    function getGroupTitle(cityId) {
      // En la nueva estructura, el cityId es directamente el nombre de la ciudad
      return cityId || 'Ubicaciones disponibles';
    }

    // Función para inicializar Intersection Observer optimizado
    function initIntersectionObserver() {
      if (!window.IntersectionObserver) {
        return; // Fallback para navegadores antiguos
      }
      
      intersectionObserver = new IntersectionObserver(function(entries) {
        // Procesar entradas en lotes para mejor rendimiento
        var entriesToProcess = entries.filter(function(entry) {
          return entry.isIntersecting;
        });
        
        if (entriesToProcess.length === 0) return;
        
        // Usar requestAnimationFrame para suavizar la carga
        requestAnimationFrame(function() {
          entriesToProcess.forEach(function(entry) {
            var element = entry.target;
            if (element.getAttribute('data-lazy-load') === 'true') {
              loadDropdownContent(element);
              intersectionObserver.unobserve(element);
            }
          });
        });
      }, {
        rootMargin: '100px', // Aumentar margen para carga más temprana
        threshold: 0.1 // Cargar cuando sea 10% visible
      });
    }
    
    // Función optimizada para abrir modal con cache
     function openModal(cityName) {
       var startTime = performance.now();
       
       // Cargar datos de ciudades bajo demanda
       var cityGroups = loadCityData();
       
       // Obtener ubicaciones de la ciudad
       var cityData = cityGroups[cityName];
       if (!cityData || !cityData.locations || cityData.locations.length === 0) return;

       var locations = cityData.locations;

       // Limpiar contenido anterior
       modalLocations.innerHTML = '';
       
       // Usar renderizado por lotes si hay muchas ubicaciones
       if (locations.length > performanceConfig.batchSize) {
         renderModalLocationsBatched(locations, startTime);
       } else {
         renderModalLocationsImmediate(locations, startTime);
       }

      // Actualizar título del modal con el nombre de la ciudad
      var modalTitle = modal.querySelector('.t4s-store-modal__title');
      if (modalTitle) {
        if (locations.length === 1) {
          modalTitle.textContent = locations[0].title || 'Información de la tienda';
        } else {
          modalTitle.textContent = cityName + ' (' + locations.length + ')';
        }
      }

      // Mostrar modal con animación suave
      requestAnimationFrame(function() {
        modal.classList.add('is-active');
        document.body.style.overflow = 'hidden';
        
        // Focus trap para accesibilidad
        var firstFocusable = modal.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        if (firstFocusable) {
          firstFocusable.focus();
        }
      });
    }
    
    // Renderizado inmediato para pocas ubicaciones en modal
     function renderModalLocationsImmediate(locations, startTime) {
       var fragment = document.createDocumentFragment();
       
       locations.forEach(function(location) {
         var locationDiv = createModalLocationElement(location);
         fragment.appendChild(locationDiv);
       });
       
       modalLocations.appendChild(fragment);
       
       // Registrar tiempo de renderizado del modal
       performanceMetrics.logRenderTime('modal', startTime);
     }
     
     // Renderizado por lotes para muchas ubicaciones en modal
     function renderModalLocationsBatched(locations, startTime) {
       var currentBatch = 0;
       var batchSize = performanceConfig.batchSize;
       
       function renderNextBatch() {
         var fragment = document.createDocumentFragment();
         var start = currentBatch * batchSize;
         var end = Math.min(start + batchSize, locations.length);
         
         for (var i = start; i < end; i++) {
           var locationDiv = createModalLocationElement(locations[i]);
           fragment.appendChild(locationDiv);
         }
         
         modalLocations.appendChild(fragment);
         currentBatch++;
         
         if (end < locations.length) {
           requestAnimationFrame(renderNextBatch);
         } else {
           // Registrar tiempo total del modal cuando termine
           performanceMetrics.logRenderTime('modal', startTime);
         }
       }
       
       renderNextBatch();
     }
    
    // Función para crear elemento de ubicación en modal
    function createModalLocationElement(location) {
      var locationDiv = document.createElement('div');
      locationDiv.className = 't4s-store-modal__location';
      
      var html = '';
      if (location.title) {
        html += '<h3 class="t4s-store-modal__location-title">' + escapeHtml(location.title) + '</h3>';
      }
      if (location.address) {
        html += '<p class="t4s-store-modal__location-info">' + escapeHtml(location.address) + '</p>';
      }
      if (location.schedule) {
        html += '<p class="t4s-store-modal__location-info"><strong>Horario:</strong> ' + escapeHtml(location.schedule) + '</p>';
      }
      if (location.phone) {
        html += '<p class="t4s-store-modal__location-info"><strong>Teléfono:</strong> <a href="tel:' + location.phone.replace(/\s/g, '') + '">' + escapeHtml(location.phone) + '</a></p>';
      }
      
      var actionsHtml = createActionButtons(location);
      if (actionsHtml) {
        html += '<div class="t4s-store-modal__location-actions">' + actionsHtml + '</div>';
      }
      
      locationDiv.innerHTML = html;
      return locationDiv;
    }

    function closeModal() {
      // Cerrar con animación suave
      requestAnimationFrame(function() {
        modal.classList.remove('is-active');
        document.body.style.overflow = '';
        
        // Limpiar contenido después de cerrar para liberar memoria
        setTimeout(function() {
          if (!modal.classList.contains('is-active')) {
            modalLocations.innerHTML = '';
          }
        }, 300); // Esperar a que termine la animación CSS
      });
    }

    function escapeHtml(text) {
      if (!text) return '';
      var div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Función de debounce para optimizar eventos
    function debounce(func, wait) {
      var timeout;
      return function executedFunction() {
        var context = this;
        var args = arguments;
        var later = function() {
          timeout = null;
          func.apply(context, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    // Variable para evitar múltiples inicializaciones
    var eventListenersInitialized = false;

    function initEventListeners() {
      // Evitar inicializar event listeners múltiples veces
      if (eventListenersInitialized) {
        return;
      }
      eventListenersInitialized = true;

      // Inicializar pines con modo de interacción optimizado
      var interactionMode = {{ se_stts.interaction_mode | default: 'click' | json }};
      var pins = document.querySelectorAll('.t4s-store-pin');
      
      // Crear funciones debounced para hover
      var debouncedMouseEnter = debounce(function(e) {
        e.preventDefault();
        var groupId = this.getAttribute('data-group-id');
        openModal(groupId);
      }, performanceConfig.debounceDelay);
      
      var debouncedMouseLeave = debounce(function(e) {
        setTimeout(function() {
          if (!modal.matches(':hover')) {
            closeModal();
          }
        }, 100);
      }, performanceConfig.debounceDelay);
      
      pins.forEach(function(pin) {
        if (interactionMode === 'hover' && window.innerWidth > 768) {
          pin.addEventListener('mouseenter', debouncedMouseEnter);
          pin.addEventListener('mouseleave', debouncedMouseLeave);
        } else {
          pin.addEventListener('click', function(e) {
            e.preventDefault();
            var cityName = this.getAttribute('data-city-name');
            openModal(cityName);
          });
        }
      });

      // Event listeners optimizados con delegación
      var debouncedClickHandler = debounce(function(e) {
        // Manejar clics en dropdown móvil
        var dropdownHeader = e.target.closest('.t4s-mobile-dropdown__header');
        if (dropdownHeader) {
          e.preventDefault();
          var dropdown = dropdownHeader.closest('.t4s-mobile-dropdown');
          if (dropdown) {
            dropdown.classList.toggle('is-open');
            // Cargar contenido si es necesario
            var content = dropdown.querySelector('.t4s-mobile-dropdown__content');
            if (content && content.getAttribute('data-loaded') !== 'true') {
              loadDropdownContent(content);
            }
          }
          return;
        }

        // Cerrar modal
        if (e.target === modal || (modalClose && e.target === modalClose)) {
          closeModal();
        }
      }, 50);
      
      document.addEventListener('click', debouncedClickHandler);

      // Cerrar modal con ESC (debounced)
      var debouncedKeyHandler = debounce(function(e) {
        if (e.key === 'Escape' && modal.classList.contains('is-active')) {
          closeModal();
        }
      }, 100);
      
      document.addEventListener('keydown', debouncedKeyHandler);
      
      // Optimizar scroll en modal para mejor rendimiento
      var modalBody = modal.querySelector('.t4s-store-modal__body');
      if (modalBody) {
        var debouncedScrollHandler = debounce(function() {
          // Opcional: lazy loading adicional en scroll
        }, performanceConfig.debounceDelay);
        
        modalBody.addEventListener('scroll', debouncedScrollHandler, { passive: true });
      }
    }
  }
})();
</script>

{%- schema -%}
{
  "name": "Ubicaciones de tiendas",
  "class": "t4s-section t4s-section-all t4s_tp_lb",
  "settings": [
    { "type": "header", "content": "General" },
    { "type": "image_picker", "id": "image", "label": "Imagen de fondo (Desktop)" },
    { "type": "image_picker", "id": "mobile_image", "label": "Imagen para móvil (formato 1:1 recomendado)", "info": "Si no se selecciona, se usará la imagen de desktop recortada en formato cuadrado" },
    { "type": "header", "content": "Configuración de ancho completo" },
    {
      "type": "checkbox",
      "id": "full_width_desktop",
      "label": "Ancho completo en desktop",
      "default": true,
      "info": "Hacer que la sección ocupe todo el ancho de la pantalla en dispositivos de escritorio"
    },
    {
      "type": "checkbox",
      "id": "full_width_tablet",
      "label": "Ancho completo en tablet",
      "default": true,
      "info": "Hacer que la sección ocupe todo el ancho de la pantalla en tablets"
    },
    {
      "type": "checkbox",
      "id": "full_width_mobile",
      "label": "Ancho completo en móvil",
      "default": true,
      "info": "Hacer que la sección ocupe todo el ancho de la pantalla en dispositivos móviles"
    },
    {
      "type": "select",
      "id": "interaction_mode",
      "label": "Mostrar información al",
      "default": "click",
      "options": [
        { "value": "click", "label": "Hacer clic" },
        { "value": "hover", "label": "Pasar el mouse (desktop)" }
      ]
    },
    {
      "type": "checkbox",
      "id": "enable_whatsapp_button",
      "label": "Mostrar botón de WhatsApp (si hay número)",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "hide_pins_on_mobile",
      "label": "Ocultar todos los pines en móvil",
      "default": false
    },
    { "type": "header", "content": "Diseño" },
    {
      "type": "select",
      "id": "layout",
      "default": "t4s-se-container",
      "label": "Disposición de sección",
      "options": [
        { "value": "t4s-se-container", "label": "Contenedor"},
        { "value": "t4s-container-wrap", "label": "Contenedor envuelto"},
        { "value": "t4s-container-fluid", "label": "Ancho completo"}
      ]
    },
    { "type": "text", "id": "mg", "label": "Margen", "default": ",,40px,", "placeholder": ",,40px," },
    { "type": "text", "id": "pd", "label": "Padding", "placeholder": "40px,,40px," },
    { "type": "text", "id": "mg_tb", "label": "Margen (tablet)", "placeholder": ",,40px," },
    { "type": "text", "id": "pd_tb", "label": "Padding (tablet)", "placeholder": ",,40px," },
    { "type": "text", "id": "mg_mb", "label": "Margen (móvil)", "default": ",,30px,", "placeholder": ",,30px," },
    { "type": "text", "id": "pd_mb", "label": "Padding (móvil)", "placeholder": ",,30px," },

    { "type": "header", "content": "+ Colores de modales y dropdowns" },
    { "type": "color", "id": "modal_bg_color", "label": "Fondo del modal", "default": "#ffffff" },
    { "type": "color", "id": "modal_text_color", "label": "Texto del modal", "default": "#333333" },
    { "type": "color", "id": "modal_title_color", "label": "Título del modal", "default": "#000000" },
    { "type": "color", "id": "modal_border_color", "label": "Borde del modal", "default": "#e0e0e0" },
    { "type": "color", "id": "modal_close_color", "label": "Botón cerrar modal", "default": "#666666" },
    { "type": "color", "id": "modal_close_hover_color", "label": "Botón cerrar modal (hover)", "default": "#000000" },
    { "type": "color", "id": "dropdown_bg_color", "label": "Fondo del dropdown móvil", "default": "#ffffff" },
    { "type": "color", "id": "dropdown_text_color", "label": "Texto del dropdown móvil", "default": "#333333" },
    { "type": "color", "id": "dropdown_title_color", "label": "Título del dropdown móvil", "default": "#000000" },
    { "type": "color", "id": "dropdown_border_color", "label": "Borde del dropdown móvil", "default": "#e0e0e0" }
  ],
  "blocks": [
    {
      "type": "city_group",
      "name": "Grupo de Ciudad",
      "settings": [
        { "type": "header", "content": "+ Posición y estilo del pin" },
        { "type": "range", "id": "pos_t", "min": 0, "max": 100, "step": 1, "unit": "%", "label": "Posición top", "default": 50 },
        { "type": "range", "id": "pos_l", "min": 0, "max": 100, "step": 1, "unit": "%", "label": "Posición left", "default": 50 },
        {
          "type": "select", "id": "pos_size", "label": "Tamaño del pin", "default": "medium",
          "options": [
            { "value": "small", "label": "Pequeño" },
            { "value": "medium", "label": "Mediano" },
            { "value": "exmedium", "label": "Grande" },
            { "value": "large", "label": "Extra grande" }
          ]
        },
        { "type": "color", "id": "bg_cl", "label": "Color de fondo", "default": "#65affa" },
        { "type": "color", "id": "cl_text", "label": "Color del ícono/texto", "default": "#fff" },
        { "type": "checkbox", "id": "hide_on_mobile", "label": "Ocultar este pin en móvil", "default": false },

        { "type": "header", "content": "+ Información de la ciudad" },
        { "type": "text", "id": "city_name", "label": "Nombre de la ciudad", "default": "Ubicaciones de Caracas", "placeholder": "ej: Ubicaciones de Caracas" },
        { "type": "textarea", "id": "locations_text", "label": "Lista de ubicaciones (separadas por comas)", "default": "Centro, Sur, Este", "placeholder": "Centro, Sur, Este", "info": "Escribe las ubicaciones separadas por comas. Ejemplo: Centro, Sur, Este" }
      ]
    }
  ],
  "max_blocks": 100,
  "presets": [
    {
      "name": "Ubicaciones de tiendas agrupadas",
      "category": "VIII. Lookbook",
      "blocks": [
        { 
          "type": "city_group",
          "settings": {
            "city_name": "Ubicaciones de Caracas",
            "locations_text": "Centro, Sur, Este",
            "pos_t": 40,
            "pos_l": 30
          }
        },
        { 
          "type": "city_group",
          "settings": {
            "city_name": "Ubicaciones de Valencia",
            "locations_text": "Norte, Centro Comercial",
            "pos_t": 60,
            "pos_l": 70
          }
        }
      ]
    }
  ]
}
{%- endschema -%}
